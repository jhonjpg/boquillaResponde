"use client"; // Directiva para Next.js, si no usas Next.js puedes omitirla

import React, { useState, useRef, useEffect } from "react";
import { BackgroundGradientAnimation } from "../BackgroundGradientAnimation"; // Aseg√∫rate que la ruta sea correcta

// Array de excusas para cuando el segundo input est√© vac√≠o
const EXCUSAS = [
  "Estoy fuera de la ciudad.",
  "Lo siento, no me siento bien hoy.",
  "Te responder√© en un momento.",
  "Mi tel√©fono se apag√≥, acabo de verlo.",
  "¬°Pens√© que ya hab√≠a respondido!",
  "Estoy en una reuni√≥n ahora.",
  "Mi WiFi est√° fallando.",
  "Estaba manejando, no pude responder.",
  "He estado muy ocupado √∫ltimamente.",
  "No hab√≠a visto tu mensaje hasta ahora.",
  "Estaba a punto de responder, lo juro.",
  "D√©jame revisar y te respondo.",
  "Tengo que preguntarle a alguien m√°s primero.",
  "Lo siento, estaba dormido.",
  "No sab√≠a c√≥mo responder.",
  "He tenido un d√≠a loco.",
  "Responder√© cuando est√© libre.",
  "¬°Oh, pens√© que hablabas con otra persona!",
  "Necesito m√°s tiempo para pensarlo.",
  "¬øPuedes repetir la pregunta?",
  "Olvid√© lo que preguntaste, perd√≥n.",
  "Estoy cargando el tel√©fono.",
  "Mi tel√©fono tuvo un fallo.",
  "Ten√≠a muchas cosas que hacer.",
  "Perd√≥n, me distraje.",
  "Es complicado.",
  "Necesito encontrar el documento primero.",
  "Esperaba el momento adecuado.",
  "Lo har√© m√°s tarde hoy.",
  "No estoy seguro si puedo decirlo.",
  "Es confidencial.",
  "Eso est√° fuera de mi alcance.",
  "Estaba desconectado.",
  "No ten√≠a se√±al.",
  "¬°Ups, acabo de ver esto!",
  "¬øPodemos hablar m√°s tarde?",
  "Estoy de vacaciones.",
  "No tengo la respuesta a√∫n.",
  "Te responder√© pronto.",
  "No soy la persona adecuada para esto.",
  "He tenido reuniones consecutivas.",
  "Mi agenda est√° llena.",
  "¬øPuedo responder ma√±ana?",
  "Me desconcentr√©.",
  "Te dar√© una mejor respuesta luego.",
  "No me olvid√©, lo prometo.",
  "No creer√°s lo que pas√≥ hoy.",
  "Tuve una emergencia familiar.",
  "Estaba atendiendo otra situaci√≥n.",
  "D√©jame investigarlo.",
  "Sigo pens√°ndolo.",
  "Lo siento, no estoy disponible ahora.",
  "Necesito m√°s informaci√≥n.",
  "El sistema estaba ca√≠do.",
  "Tuve problemas t√©cnicos.",
  "Se me rompi√≥ el teclado üòÖ",
  "Pens√© que ya respond√≠.",
  "Respond√≠a en mi cabeza.",
  "Necesito aprobaci√≥n primero.",
  "Eso no es de mi departamento.",
  "Estoy abrumado.",
  "Se me congel√≥ el cerebro.",
  "Uy, vibras de lunes üòÖ",
  "¬øPodemos saltarnos esta?",
];

function App() {
  // Estados para controlar la l√≥gica de los inputs y la respuesta
  const [mostrarSegundo, setMostrarSegundo] = useState(false); // Controla la visibilidad y enfoque del segundo input
  const [textoPrimerInput, setTextoPrimerInput] = useState(""); // Contenido del primer input (o texto a mostrar)
  const [textoSegundoInput, setTextoSegundoInput] = useState(""); // Contenido del segundo input (respuesta escrita)
  const [pregunta, setPregunta] = useState(""); // Contenido del input de la pregunta
  const [textoMostrado, setTextoMostrado] = useState(""); // Texto visible en el primer input
  const [textoAnimado, setTextoAnimado] = useState(""); // Texto de la respuesta animada
  const [isAnimando, setIsAnimando] = useState(false); // Controla si la animaci√≥n de respuesta est√° en curso

  const segundoInputRef = useRef(null); // Referencia al segundo input para enfocarlo program√°ticamente

  const fraseObjetivo = "Boquilla, favor de responder esta pregunta..."; // Frase que aparece cuando se escribe 'P'

  // Efecto para manejar el enfoque del segundo input y el texto mostrado
  useEffect(() => {
    if (mostrarSegundo) {
      segundoInputRef.current?.focus(); // Enfoca el segundo input si est√° activo
      setTextoMostrado(""); // Limpia el texto del primer input cuando el segundo est√° activo
    } else {
      setTextoMostrado(textoPrimerInput); // Muestra el contenido del primer input si el segundo no est√° activo
    }
  }, [mostrarSegundo, textoPrimerInput]);

  // Manejador para el primer input
  const manejarPrimerInput = (e) => {
    const val = e.target.value;

    if (val.trim().toLowerCase() === "p") { // Convertir a min√∫sculas para aceptar 'P' o 'p'
      setMostrarSegundo(true); // Activa el segundo input
      setTextoPrimerInput(""); // Limpia el primer input
      setTextoSegundoInput(""); // Limpia el segundo input
      setTextoAnimado(""); // Limpia la respuesta animada
    } else {
      setMostrarSegundo(false); // Desactiva el segundo input
      setTextoPrimerInput(val); // Actualiza el texto del primer input
      setTextoMostrado(val); // Muestra el texto en el primer input
      setTextoSegundoInput(""); // Limpia el segundo input
      setTextoAnimado(""); // Limpia la respuesta animada
    }
  };

  // Manejador para el segundo input
  const manejarSegundoInput = (e) => {
    const val = e.target.value;
    setTextoSegundoInput(val); // Actualiza el contenido del segundo input

    // Muestra la frase objetivo a medida que el usuario escribe, hasta completarla
    const longitud = val.length;
    if (longitud <= fraseObjetivo.length) {
      setTextoMostrado(fraseObjetivo.slice(0, longitud));
    } else {
      setTextoMostrado(fraseObjetivo);
    }
  };

  // Funci√≥n para animar la respuesta letra por letra
  const animarRespuesta = (texto) => {
    if (!texto || texto.length === 0) {
      setTextoAnimado("No hay texto para mostrar.");
      return;
    }

    setIsAnimando(true); // Indica que la animaci√≥n est√° en curso
    setTextoAnimado(""); // Reinicia el texto animado a vac√≠o para construirlo desde cero

    let i = 0; // Inicia el contador desde 0 para incluir la primera letra
    const totalDuracion = 3000; // Duraci√≥n total de la animaci√≥n (3 segundos)
    const intervalTiempo = totalDuracion / texto.length; // Tiempo entre cada letra

    // Configura un intervalo para a√±adir letras una por una
    const intervalo = setInterval(() => {
      if (i >= texto.length) {
        clearInterval(intervalo); // Detiene el intervalo cuando todas las letras se han mostrado
        setIsAnimando(false); // Indica que la animaci√≥n ha terminado
        return;
      }

      // A√±ade la siguiente letra al texto animado
      setTextoAnimado((prev) => prev + texto.charAt(i));
      i++;
    }, intervalTiempo);
  };

  // Manejador para el bot√≥n de "Enviar"
  const manejarEnvio = () => {
    // Al enviar, resetear los inputs principales
    setTextoPrimerInput("");
    setTextoSegundoInput("");
    setTextoMostrado(""); // Esto se maneja en el useEffect, pero lo reseteamos por consistencia

    let respuestaFinal = "";

    // L√≥gica para determinar la respuesta
    if (textoSegundoInput.trim() === "" && pregunta.trim() === "") {
      respuestaFinal = "Palomo, la petici√≥n y la pregunta est√°n vac√≠as.";
    } else if (textoSegundoInput.trim() === "") {
      // Si el segundo input (la petici√≥n/respuesta) est√° vac√≠o, elige una excusa aleatoria
      const randomIndex = Math.floor(Math.random() * EXCUSAS.length);
      respuestaFinal = EXCUSAS[randomIndex];
    } else if (pregunta.trim() === "") {
      respuestaFinal = "Palomo, la pregunta est√° vac√≠a.";
    } else {
      // Si ambos inputs tienen contenido, usa la respuesta del segundo input
      respuestaFinal = textoSegundoInput.trim();
    }

    // Inicia la animaci√≥n de la respuesta
    animarRespuesta(respuestaFinal);
  };

  // Funci√≥n para resetear solo el input de la pregunta
  const resetearPregunta = () => {
    setPregunta(""); // Limpia el estado de la pregunta
  };

  return (
    <>
      <section className="w-screen h-screen flex flex-col relative justify-center items-center">
        {/* Componente de animaci√≥n de fondo */}
        <BackgroundGradientAnimation />

        {/* Contenedor principal de la interfaz */}
        <div className="container w-[32%] absolute z-20 overflow-hidden">
          {/* T√≠tulo de la aplicaci√≥n */}
          {/* Asume que 'boquilla-title' est√° definido en tu CSS global */}
          <h1 className="boquilla-title">Boquilla Responde</h1>
          <div className="card">
            {/* Input principal que muestra el texto din√°mico */}
            <input
              type="text"
              placeholder="Escribe 'P' para activar"
              value={textoMostrado}
              onChange={manejarPrimerInput}
              className="input"
              readOnly={mostrarSegundo} // Se hace de solo lectura cuando el segundo input est√° activo
            />

            {/* Input oculto para la respuesta, enfocado cuando se activa */}
            <input
              type="text"
              ref={segundoInputRef}
              value={textoSegundoInput}
              onChange={manejarSegundoInput}
              placeholder="Escribe tu respuesta aqu√≠"
              className="inputdos"
              autoComplete="off"
              disabled={isAnimando} // Deshabilitado durante la animaci√≥n de respuesta
            />

            {/* Input para la pregunta del usuario */}
            <input
              type="text"
              placeholder="Escribe tu pregunta"
              value={pregunta}
              onChange={(e) => setPregunta(e.target.value)}
              className="input"
              disabled={isAnimando} // Deshabilitado durante la animaci√≥n de respuesta
            />

            {/* Bot√≥n para enviar la pregunta/respuesta */}
            <button
              className="btn-enviar"
              onClick={manejarEnvio}
              disabled={isAnimando} // Deshabilitado durante la animaci√≥n
            >
              Enviar
            </button>

            {/* √Årea donde se muestra la respuesta animada */}
            <div className="respuesta-final">
              <strong>Respuesta:</strong> {textoAnimado}
            </div>

            {/* Bot√≥n para resetear solo el input de la pregunta */}
            <button
              className="btn-reset"
              onClick={resetearPregunta}
              disabled={isAnimando} // Deshabilitado durante la animaci√≥n
              style={{ marginTop: "10px" }}
            >
              Resetear Pregunta
            </button>
          </div>
        </div>
      </section>
    </>
  );
}

export default App;